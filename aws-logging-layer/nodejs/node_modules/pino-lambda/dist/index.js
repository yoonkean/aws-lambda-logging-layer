"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pino_1 = __importDefault(require("pino"));
const context_1 = require("./context");
const request_1 = require("./request");
const stream_1 = require("./stream");
/**
 * Exports a default constructor with an extended instance of Pino
 * that provides convinience methods for use with AWS Lambda
 */
exports.default = (extendedPinoOptions) => {
    const options = extendedPinoOptions !== null && extendedPinoOptions !== void 0 ? extendedPinoOptions : {};
    const storageProvider = (options.storageProvider =
        (extendedPinoOptions === null || extendedPinoOptions === void 0 ? void 0 : extendedPinoOptions.storageProvider) || context_1.GlobalContextStorageProvider);
    // attach request values to logs
    const pinoOptions = {
        ...options,
        mixin: () => {
            // preserves original mixin set in options
            if (typeof options.mixin === 'function') {
                const originalMixinResult = options.mixin();
                return { ...originalMixinResult, ...storageProvider.getContext() };
            }
            return { ...storageProvider.getContext() };
        },
    };
    // construct a pino logger and set its destination
    const logger = pino_1.default(pinoOptions, stream_1.createStream(pinoOptions));
    // extend the base logger
    logger.withRequest = request_1.withRequest(logger, pinoOptions);
    return logger;
};
// reexport all public types
__exportStar(require("./formatters"), exports);
__exportStar(require("./types"), exports);
