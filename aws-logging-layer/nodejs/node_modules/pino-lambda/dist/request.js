"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withRequest = void 0;
const AMAZON_TRACE_ID = '_X_AMZN_TRACE_ID';
const CORRELATION_HEADER = 'x-correlation-';
const CORRELATION_ID = `${CORRELATION_HEADER}id`;
const CORRELATION_TRACE_ID = `${CORRELATION_HEADER}trace-id`;
const CORRELATION_DEBUG = `${CORRELATION_HEADER}debug`;
const withRequest = (logger, options) => (event, context) => {
    var _a;
    // keep a reference to the original logger level
    const configuredLevel = logger.level;
    const ctx = {
        awsRequestId: context.awsRequestId,
    };
    // capture api gateway request ID
    const apiRequestId = (_a = event.requestContext) === null || _a === void 0 ? void 0 : _a.requestId;
    if (apiRequestId) {
        ctx.apiRequestId = apiRequestId;
    }
    // capture any correlation headers sent from upstream callers
    if (event.headers) {
        Object.keys(event.headers).forEach((header) => {
            if (header.toLowerCase().startsWith(CORRELATION_HEADER)) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                ctx[header] = event.headers[header];
            }
        });
    }
    // capture the xray trace id if its enabled
    if (process.env[AMAZON_TRACE_ID]) {
        ctx[CORRELATION_TRACE_ID] = process.env[AMAZON_TRACE_ID];
    }
    // set the correlation id if not already set by upstream callers
    if (!ctx[CORRELATION_ID]) {
        ctx[CORRELATION_ID] = context.awsRequestId;
    }
    // if an upstream service requests DEBUG mode,
    // dynamically modify the logging level
    if (ctx[CORRELATION_DEBUG] === 'true') {
        logger.level = 'debug';
    }
    else {
        logger.level = configuredLevel;
    }
    // handle custom request level mixins
    if (options.requestMixin) {
        const result = options.requestMixin(event, context);
        for (const key in result) {
            // Cast this to string for typescript
            // when the JSON serializer runs, by default it omits undefined properties
            ctx[key] = result[key];
        }
    }
    if (options.storageProvider) {
        options.storageProvider.setContext(ctx);
    }
};
exports.withRequest = withRequest;
