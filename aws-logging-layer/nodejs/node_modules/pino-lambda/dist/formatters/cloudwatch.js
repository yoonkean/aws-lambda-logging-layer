"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudwatchLogFormatter = void 0;
const pino_1 = __importDefault(require("pino"));
const context_1 = require("../context");
const formatLevel = (level) => {
    var _a;
    if (typeof level === 'string') {
        return level.toLocaleUpperCase();
    }
    else if (typeof level === 'number') {
        return (_a = pino_1.default.levels.labels[level]) === null || _a === void 0 ? void 0 : _a.toLocaleUpperCase();
    }
    return level;
};
/**
 * Formats the log in native cloudwatch format.
 * Default format for pino-lambda
 */
class CloudwatchLogFormatter {
    format(buffer, options) {
        /**
           * Writes to stdout using the same method that AWS lambda uses
           * under the hood for console.log
           * This preserves the default log format of cloudwatch
           */
        let output = buffer;
        const { level, msg } = JSON.parse(buffer);
        const storageProvider = options.storageProvider || context_1.GlobalContextStorageProvider;
        const { awsRequestId } = storageProvider.getContext() || {};
        const time = new Date().toISOString();
        const levelTag = formatLevel(level);
        output = `${time}${awsRequestId ? `\t${awsRequestId}` : ''}\t${levelTag}\t${msg}\t${buffer}`;
        return output;
    }
}
exports.CloudwatchLogFormatter = CloudwatchLogFormatter;
